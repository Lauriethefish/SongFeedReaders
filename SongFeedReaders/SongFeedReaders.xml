<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SongFeedReaders</name>
    </assembly>
    <members>
        <member name="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberFeed">
            <summary>
            Base class for Beast Saber feeds.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberFeed.#ctor(SongFeedReaders.Feeds.BeastSaber.BeastSaberFeedSettings,SongFeedReaders.Feeds.BeastSaber.IBeastSaberPageHandler,WebUtilities.IWebClient,SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Initializes a new <see cref="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberFeed"/>.
            </summary>
            <param name="feedSettings"></param>
            <param name="pageHandler"></param>
            <param name="webClient"></param>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberFeed.GetAsyncEnumerator(SongFeedReaders.Feeds.IFeedSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberFeed.GetPageContent(WebUtilities.IWebResponseContent)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberFeedSettings">
            <summary>
            Base class for Beast Saber feed settings
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler">
            <summary>
            Handles reading content from a Beast Saber feed page.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.Logger">
            <summary>
            Logger used by this instance.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.#ctor">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.#ctor(SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler"/> with a logger.
            </summary>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.Parse(SongFeedReaders.Feeds.PageContent,System.Uri,SongFeedReaders.Feeds.IFeedSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.ParseXMLPage(System.String,System.Uri,System.Boolean)">
            <summary>
            Most of this yoinked from Brian's SyncSaber.
            https://github.com/brian91292/SyncSaber/blob/master/SyncSaber/SyncSaber.cs#L259
            </summary>
            <param name="pageText"></param>
            <param name="sourceUri"></param>
            <param name="storeRawData"></param>
            <exception cref="T:System.Xml.XmlException"></exception>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.ContentType">
            <summary>
            Content type for a Beast Saber page.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.ContentType.Unknown">
            <summary>
            Unknown content.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.ContentType.XML">
            <summary>
            XML content.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.BeastSaber.BeastSaberPageHandler.ContentType.JSON">
            <summary>
            JSON content.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeastSaber.IBeastSaberPageHandler">
            <summary>
            Handles reading content from a Beast Saber feed page.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverFeed">
            <summary>
            Base class for Beat Saver feeds.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverFeed.#ctor(SongFeedReaders.Feeds.IFeedSettings,SongFeedReaders.Feeds.BeatSaver.IBeatSaverPageHandler,WebUtilities.IWebClient,SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Initializes a new <see cref="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverFeed"/>.
            </summary>
            <param name="feedSettings"></param>
            <param name="pageHandler"></param>
            <param name="webClient"></param>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverFeed.GetPageContent(WebUtilities.IWebResponseContent)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverFeedSettings">
            <summary>
            Base class for Beat Saver feed settings.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed">
            <summary>
            Base class for Beat Saver feeds.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.#ctor(SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestSettings,SongFeedReaders.Feeds.BeatSaver.IBeatSaverPageHandler,WebUtilities.IWebClient,SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Initializes a new <see cref="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed"/>.
            </summary>
            <param name="feedSettings"></param>
            <param name="pageHandler"></param>
            <param name="webClient"></param>
            <param name="logFactory"></param>
        </member>
        <member name="P:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.FeedId">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.Description">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.GetUriForDate(SongFeedReaders.Feeds.FeedDate)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.AreSettingsValid(SongFeedReaders.Feeds.IFeedSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestFeed.GetAsyncEnumerator(SongFeedReaders.Feeds.IFeedSettings)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestSettings">
            <summary>
            Settings for the Beat Saver Latest feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestSettings.FeedId">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestSettings.FeedIndex">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestSettings.SongsPerPage">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverLatestSettings.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler">
            <summary>
            Handles parsing the page content from Beat Saver.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.Logger">
            <summary>
            Logger used by this instance.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.#ctor">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.#ctor(SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler"/> with a logger.
            </summary>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.Parse(SongFeedReaders.Feeds.PageContent,System.Uri,SongFeedReaders.Feeds.IFeedSettings)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.ParseSongsFromJson(Newtonsoft.Json.Linq.JToken,System.Uri,SongFeedReaders.Feeds.IFeedSettings)">
            <summary>
            Parses out a List of ScrapedSongs from the json. Also works if the page is for a single song.
            </summary>
            <param name="result"></param>
            <param name="sourceUri"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.ParseSongFromJson(Newtonsoft.Json.Linq.JToken,System.Uri,SongFeedReaders.Feeds.IFeedSettings)">
            <summary>
            Creates a SongInfo from a JObject.
            </summary>
            <param name="song"></param>
            <param name="sourceUri"></param>
            <param name="settings"></param>
            <exception cref="T:System.ArgumentException">Thrown when a hash can't be found for the given song JObject.</exception>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.BeatSaver.BeatSaverPageHandler.GetLatestSongVersion(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Parses the latest version from a Beat Saver song's JSON.
            </summary>
            <param name="song"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Thrown if the song doesn't have any published versions available.</exception>
        </member>
        <member name="T:SongFeedReaders.Feeds.BeatSaver.IBeatSaverPageHandler">
            <summary>
            Handles reading content from a Beat Saver page.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator">
            <summary>
            A <see cref="T:SongFeedReaders.Feeds.FeedAsyncEnumerator"/> for feeds that page by DateTime.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.DatedFeed">
            <summary>
            The feed associated with this object.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.CurrentEarliest">
            <summary>
            Current page's earliest song upload DateTime.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.CurrentLatest">
            <summary>
            Current page's latest song upload DateTime.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.#ctor(SongFeedReaders.Feeds.IDatedFeed,System.Boolean)">
            <summary>
            Create a new <see cref="T:SongFeedReaders.Feeds.FeedAsyncEnumerator"/> using a default <see cref="T:SongFeedReaders.Feeds.FeedDate"/>
            (starts at the latest song and moves backward).
            </summary>
            <param name="datedFeed"></param>
            <param name="cachePages"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.#ctor(SongFeedReaders.Feeds.IDatedFeed,SongFeedReaders.Feeds.FeedDate,System.Boolean)">
            <summary>
            Create a new <see cref="T:SongFeedReaders.Feeds.FeedAsyncEnumerator"/>.
            </summary>
            <param name="datedFeed"></param>
            <param name="feedDate"></param>
            <param name="cachePages"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.ProcessResult(SongFeedReaders.Feeds.PageReadResult,SongFeedReaders.Feeds.DateDirection)">
            <summary>
            Process the result to update enumerator's state.
            </summary>
            <param name="result"></param>
            <param name="dateDirection"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.DatedFeedAsyncEnumerator.MovePreviousAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.InvalidFeedSettingsException">
            <summary>
            This exception is thrown when a method call is invalid for an object's
            <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.InvalidFeedSettingsException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.InvalidFeedSettingsException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.InvalidFeedSettingsException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedReaderException">
            <summary>
            This exception is thrown when an error occurs while reading a feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedReaderException.FailureCode">
            <summary>
            A <see cref="T:SongFeedReaders.Feeds.FeedReaderFailureCode"/> associated with the exception.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedReaderException.Message">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedReaderException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedReaderException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedReaderException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedReaderException.#ctor(System.String,System.Exception,SongFeedReaders.Feeds.FeedReaderFailureCode)">
            <summary>
            Initializes a new <see cref="T:SongFeedReaders.Feeds.FeedReaderException"/> with the given <see cref="T:SongFeedReaders.Feeds.FeedReaderFailureCode"/>.
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="reason"></param>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedReaderFailureCode">
            <summary>
            Type of failure that occurred while reading a feed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedReaderFailureCode.Generic">
            <summary>
            Generic error.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedReaderFailureCode.SourceFailed">
            <summary>
            All pages failed, likely a site problem.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedReaderFailureCode.PageFailed">
            <summary>
            Some pages failed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedReaderFailureCode.Cancelled">
            <summary>
            CancellationToken was triggered before the reader finished.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.PageParseException">
            <summary>
            This exception is thrown when there's an error parsing a page's content.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageParseException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageParseException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageParseException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedAsyncEnumerator">
            <summary>
            Used to move forward or backward through a feed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedAsyncEnumerator.Feed">
            <summary>
            Feed to enumerate through.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedAsyncEnumerator.LookAhead">
            <summary>
            How many pages to load forward/backward. Page caching must be enabled.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedAsyncEnumerator.EnablePageCache">
            <summary>
            If true, page results will be stored to speed up access to previously visited pages.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedAsyncEnumerator.CanMovePrevious">
            <summary>
            If true, indicates there may be another page before the current one.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedAsyncEnumerator.CanMoveNext">
            <summary>
            If true, indicates there may be another page after the current one.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedAsyncEnumerator.#ctor(SongFeedReaders.Feeds.IFeed)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.FeedAsyncEnumerator"/>.
            </summary>
            <param name="feed"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedAsyncEnumerator.#ctor(SongFeedReaders.Feeds.IFeed,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.FeedAsyncEnumerator"/>.
            </summary>
            <param name="feed"></param>
            <param name="cachePages"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
            <summary>
            Requests the next page and returns the result.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedAsyncEnumerator.MovePreviousAsync(System.Threading.CancellationToken)">
            <summary>
            Requests the previous page and returns the result.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedAsyncEnumerator.MoveNextAsync">
            <summary>
            Requests the next page and returns the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedAsyncEnumerator.MovePreviousAsync">
            <summary>
            Requests the previous page and returns the result.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedBase">
            <summary>
            Base class for an <see cref="T:SongFeedReaders.Feeds.IFeed"/>.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedBase.Logger">
            <summary>
            <see cref="T:SongFeedReaders.Logging.ILogger"/> used by this instance.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedBase.PageHandler">
            <summary>
            Parses the contents of Beat Saver pages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedBase.WebClient">
            <summary>
            Web client used by the feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedBase.FeedId">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedBase.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedBase.Description">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedBase.FeedSettings">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedBase.HasValidSettings">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.EnsureValidSettings">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.#ctor(SongFeedReaders.Feeds.IFeedSettings,SongFeedReaders.Feeds.IFeedPageHandler,WebUtilities.IWebClient,SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Initializes a new <see cref="T:SongFeedReaders.Feeds.FeedBase"/>.
            </summary>
            <param name="feedSettings"></param>
            <param name="pageHandler"></param>
            <param name="webClient"></param>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.GetPageContent(WebUtilities.IWebResponseContent)">
            <summary>
            Returns a <see cref="T:SongFeedReaders.Feeds.PageContent"/> from <paramref name="responseContent"/>.
            </summary>
            <param name="responseContent"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.GetPageAsync(System.Uri,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.ReadAsync(System.IProgress{SongFeedReaders.Feeds.PageReadResult},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.GetAsyncEnumerator(SongFeedReaders.Feeds.IFeedSettings)">
            <summary>
            Gets a <see cref="T:SongFeedReaders.Feeds.FeedAsyncEnumerator"/> for this feed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.AreSettingsValid(SongFeedReaders.Feeds.IFeedSettings)">
            <summary>
            Returns true if the settings are valid for this feed.
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.ParseSongsFromPage(SongFeedReaders.Feeds.PageContent,System.Uri)">
            <summary>
            Parses the given page text into a list of <see cref="T:SongFeedReaders.Models.ScrapedSong"/>.
            </summary>
            <param name="content"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedBase.CreateResult(System.Uri,System.Collections.Generic.IEnumerable{SongFeedReaders.Models.ScrapedSong})">
            <summary>
            Creates a <see cref="T:SongFeedReaders.Feeds.PageReadResult"/> from a collection of songs.
            </summary>
            <param name="uri"></param>
            <param name="pageSongs"></param>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedDate">
            <summary>
            Defines a <see cref="T:System.DateTime"/> and <see cref="T:SongFeedReaders.Feeds.DateDirection"/> to move in a feed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedDate.Default">
            <summary>
            Default value starting from latest and moving back.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedDate.Date">
            <summary>
            DateTime to move from in the feed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedDate.Direction">
            <summary>
            Direction to move in the feed.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedDate.#ctor(System.DateTime,SongFeedReaders.Feeds.DateDirection)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.FeedDate"/>.
            </summary>
            <param name="dateTime"></param>
            <param name="direction"></param>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedDate.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedDate.Equals(SongFeedReaders.Feeds.FeedDate)">
            <summary>
            Returns true if if <paramref name="other"/> is the same as this instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedDate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedDate.op_Equality(SongFeedReaders.Feeds.FeedDate,SongFeedReaders.Feeds.FeedDate)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedDate.op_Inequality(SongFeedReaders.Feeds.FeedDate,SongFeedReaders.Feeds.FeedDate)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.DateDirection">
            <summary>
            Direction to move from a date.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.DateDirection.Before">
            <summary>
            Move back in time.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.DateDirection.After">
            <summary>
            Move forward in time.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedResult">
            <summary>
            Stores the results of a feed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedResult.songs">
            <summary>
            Dictionary of songs that were read from the feed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.FeedResult.pageResults">
            <summary>
            Array of page results.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedResult.GetSongs">
            <summary>
            Returns the songs from the result.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedResult.GetResults">
            <summary>
            Returns the page results.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedResult.Count">
            <summary>
            Number of songs in the result.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.FeedSettingsBase">
            <summary>
            Base class for basic feed settings.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.FeedId">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.FeedIndex">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.SongsPerPage">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.MaxSongs">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.StoreRawData">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.Filter">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Feeds.FeedSettingsBase.StopWhenAny">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.FeedSettingsBase.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Feeds.IDatedFeed">
            <summary>
            A feed that pages songs based on their upload date.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.IDatedFeed.GetUriForDate(SongFeedReaders.Feeds.FeedDate)">
            <summary>
            Gets the feed's full URI for the specified <see cref="T:SongFeedReaders.Feeds.FeedDate"/>.
            </summary>
            <param name="feedDate"></param>
            <exception cref="T:SongFeedReaders.Feeds.InvalidFeedSettingsException">Thrown when the feed's settings aren't valid.</exception>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.IDatedFeedSettings">
            <summary>
            Settings for an <see cref="T:SongFeedReaders.Feeds.IDatedFeed"/>.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IDatedFeedSettings.StartingDate">
            <summary>
            Start reading songs uploaded on or after this date.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IDatedFeedSettings.EndingDate">
            <summary>
            Stop reading songs uploaded after this date.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.IFeed">
            <summary>
            Represents a specific feed for a service.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeed.FeedId">
            <summary>
            Unique string ID of the feed. (Format should be 'Service.FeedName').
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeed.DisplayName">
            <summary>
            Display name of the feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeed.Description">
            <summary>
            Description of the feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeed.FeedSettings">
            <summary>
            Settings for the feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeed.HasValidSettings">
            <summary>
            Return true if the settings are valid for this feed.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.IFeed.EnsureValidSettings">
            <summary>
            Throws an <see cref="T:SongFeedReaders.Feeds.InvalidFeedSettingsException"/> if the settings aren't valid for this feed.
            </summary>
            <exception cref="T:SongFeedReaders.Feeds.InvalidFeedSettingsException"></exception>
        </member>
        <member name="M:SongFeedReaders.Feeds.IFeed.GetPageAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Reads and parses a page at the given <paramref name="uri"/>.
            </summary>
            <param name="uri"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.IFeed.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SongFeedReaders.Feeds.InvalidFeedSettingsException"></exception>
        </member>
        <member name="M:SongFeedReaders.Feeds.IFeed.ReadAsync(System.IProgress{SongFeedReaders.Feeds.PageReadResult},System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="progress"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:SongFeedReaders.Feeds.InvalidFeedSettingsException"></exception>
        </member>
        <member name="T:SongFeedReaders.Feeds.IFeedPageHandler">
            <summary>
            Handles reading content from a feed page.
            <see cref="T:SongFeedReaders.Feeds.IFeed"/> implementations should use an interface or base class specific
            to their service in their constructors.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.IFeedPageHandler.Parse(SongFeedReaders.Feeds.PageContent,System.Uri,SongFeedReaders.Feeds.IFeedSettings)">
            <summary>
            Parse's the page's content and returns a list of every <see cref="T:SongFeedReaders.Models.ScrapedSong"/> on the page.
            </summary>
            <param name="content"></param>
            <param name="pageUri"></param>
            <param name="settings"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SongFeedReaders.Feeds.PageParseException"></exception>
        </member>
        <member name="T:SongFeedReaders.Feeds.IFeedSettings">
            <summary>
            Settings for a feed.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.FeedId">
            <summary>
            Unique string ID of the feed. (Format should be 'Service.FeedName').
            Should match the feed that uses it. TODO: Not using this anymore?
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.FeedIndex">
            <summary>
            Index of the feed. TODO: Not using this anymore?
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.SongsPerPage">
            <summary>
            Number of songs per page.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.MaxSongs">
            <summary>
            Max number of songs to retrieve, 0 for unlimited.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.StoreRawData">
            <summary>
            Indicates to the FeedReader that it should store the raw scraped data.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.Filter">
            <summary>
            Only return songs that return true for this function.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IFeedSettings.StopWhenAny">
            <summary>
            If this returns true for any <see cref="T:SongFeedReaders.Models.ScrapedSong"/>, treat that page as the last.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.IPagedFeed">
            <summary>
            A feed that lists songs by page.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.IPagedFeed.GetUriForPage(System.Int32)">
            <summary>
            Gets the feed's full URI for the specified page.
            </summary>
            <param name="page"></param>
            <exception cref="T:SongFeedReaders.Feeds.InvalidFeedSettingsException">Thrown when the feed's settings aren't valid.</exception>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.IPagedFeedSettings">
            <summary>
            Settings for a feed that lists songs by page.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.IPagedFeedSettings.StartingPage">
            <summary>
            Page of the feed to start on, default is 1. 
            For all feeds, setting '1' here is the same as starting on the first page.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Feeds.PageContent">
            <summary>
            Container for page content and its type.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageContent.ContentId_Unknown">
            <summary>
            ContentId for when it's unrecognized.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageContent.ContentId_NotSpecified">
            <summary>
            ContentId for when it's not specified.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageContent.ContentId_XML">
            <summary>
            <see cref="F:SongFeedReaders.Feeds.PageContent.ContentId"/> for XML.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageContent.ContentId_JSON">
            <summary>
            <see cref="F:SongFeedReaders.Feeds.PageContent.ContentId"/> for JSON.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageContent.ContentId">
            <summary>
            Type of content on the page.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageContent.Content">
            <summary>
            Page content.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageContent.#ctor(System.String,System.String)">
            <summary>
            Constructs a <see cref="T:SongFeedReaders.Feeds.PageContent"/>.
            </summary>
            <param name="contentId"></param>
            <param name="content"></param>
        </member>
        <member name="T:SongFeedReaders.Feeds.PageReadResult">
            <summary>
            Stores the results of a page read.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.PageReadResult.Uri">
            <summary>
            <see cref="T:System.Uri"/> for the page.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.Songs">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the matched songs.
            </summary>
            <returns></returns>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageReadResult.FirstSong">
            <summary>
            First song on the unfiltered page.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageReadResult.LastSong">
            <summary>
            Last song on the unfiltered page.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageReadResult.SongsOnPage">
            <summary>
            Total unfiltered songs.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.PageReadResult.IsLastPage">
            <summary>
            If true, indicates there are no more pages after this one.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.PageReadResult.PageError">
            <summary>
            Type of error that occurred, if any.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.PageReadResult.SongCount">
            <summary>
            Number of songs returned by the page.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.PageReadResult.Exception">
            <summary>
            If an exception was thrown reading the page, it is available here.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Feeds.PageReadResult.Successful">
            <summary>
            If true, indicates the reading of the page was successful.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.#ctor(System.Uri,System.Collections.Generic.IEnumerable{SongFeedReaders.Models.ScrapedSong},SongFeedReaders.Models.ScrapedSong,SongFeedReaders.Models.ScrapedSong,System.Int32,System.Boolean)">
            <summary>
            Create a new <see cref="T:SongFeedReaders.Feeds.PageReadResult"/>.
            </summary>
            <param name="uri"><see cref="T:System.Uri"/> for the page.</param>
            <param name="songs">The collection of matched songs. Songs unwanted due to the settings should not be in here.</param>
            <param name="firstSong">The first unfiltered song on the page.</param>
            <param name="lastSong">The last unfiltered song on the page.</param>
            <param name="songsOnPage">Number of unfiltered songs on the page.</param>
            <param name="isLastPage">If true, ndicates there are no more pages after this one.</param>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.#ctor(System.Uri,System.Exception,SongFeedReaders.Feeds.PageErrorType,System.Collections.Generic.List{SongFeedReaders.Models.ScrapedSong},SongFeedReaders.Models.ScrapedSong,SongFeedReaders.Models.ScrapedSong,System.Int32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Feeds.PageReadResult"/> when there were error(s) reading the page.
            </summary>
            <param name="uri"><see cref="T:System.Uri"/> for the page.</param>
            <param name="exception"></param>
            <param name="pageError"></param>
            <param name="songs">The collection of matched songs. Songs unwanted due to the settings should not be in here.</param>
            <param name="firstSong">The first unfiltered song on the page.</param>
            <param name="lastSong">The last unfiltered song on the page.</param>
            <param name="songsOnPage">Number of unfiltered songs on the page.</param>
            <param name="isLastPage">If true, ndicates there are no more pages after this one.</param>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.FromWebClientException(WebUtilities.WebClientException,System.Uri,SongFeedReaders.Logging.ILogger)">
            <summary>
            Creates an empty <see cref="T:SongFeedReaders.Feeds.PageReadResult"/> from a <see cref="T:WebUtilities.WebClientException"/>.
            </summary>
            <param name="ex"></param>
            <param name="requestUri"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.CancelledResult(System.Uri,System.OperationCanceledException)">
            <summary>
            Returns an empty <see cref="T:SongFeedReaders.Feeds.PageReadResult"/> indicating the page read was cancelled.
            </summary>
            <param name="requestUri"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageReadResult.CancelledResult(System.Uri)">
            <summary>
            Returns an empty <see cref="T:SongFeedReaders.Feeds.PageReadResult"/> indicating the page read was cancelled.
            </summary>
            <param name="requestUri"></param>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.PageErrorTypeExtensions">
            <summary>
            Extension method(s) for <see cref="T:SongFeedReaders.Feeds.PageErrorType"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Feeds.PageErrorTypeExtensions.ErrorToString(SongFeedReaders.Feeds.PageErrorType)">
            <summary>
            Returns a user-friendly string for a given <see cref="T:SongFeedReaders.Feeds.PageErrorType"/>.
            </summary>
            <param name="pageError"></param>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Feeds.PageErrorType">
            <summary>
            The type of error, if any, that occurred.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.None">
            <summary>
            No error occured.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.Timeout">
            <summary>
            A timeout occurred waiting for a response.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.SiteError">
            <summary>
            An error occurred getting a response from the site.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.ParsingError">
            <summary>
            Page content was read, but couldn't be parsed.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.Cancelled">
            <summary>
            Page read was cancelled.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.Unknown">
            <summary>
            An unknown error occurred.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Feeds.PageErrorType.PageOutOfRange">
            <summary>
            A page was requested that is out of range.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Logging.FeedReaderLogger">
            <summary>
            Basic console logger for <see cref="N:SongFeedReaders"/>.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.FeedReaderLogger.loggerSettings">
            <summary>
            Settings for the logger.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.FeedReaderLogger.#ctor">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Logging.FeedReaderLogger"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.FeedReaderLogger.#ctor(SongFeedReaders.Logging.ILoggerSettings)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Logging.FeedReaderLogger"/>.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:SongFeedReaders.Logging.FeedReaderLogger.ModuleName">
            <summary>
            Name of the module using the logger.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.FeedReaderLogger.LogLevel">
            <summary>
            Lowest <see cref="T:SongFeedReaders.Logging.LogLevel"/> to output messages from.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.FeedReaderLogger.ShowModule">
            <summary>
            If true, show the module name in log messages.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.FeedReaderLogger.ShortSource">
            <summary>
            If true, don't show file/member/line information in the log message.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.FeedReaderLogger.EnableTimestamp">
            <summary>
            If true, show the current time in the message.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.FeedReaderLogger.Log(System.String,SongFeedReaders.Logging.LogLevel,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Logging.FeedReaderLogger.Log(System.Exception,SongFeedReaders.Logging.LogLevel,System.String,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Logging.ILogFactory">
            <summary>
            A factory to create <see cref="T:SongFeedReaders.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.ILogFactory.GetLogger(System.String)">
            <summary>
            Gets an <see cref="T:SongFeedReaders.Logging.ILogger"/>, optionally with a module name.
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Logging.ILogger">
            <summary>
            Interface for a logger used by <see cref="N:SongFeedReaders"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.ILogger.Log(System.String,SongFeedReaders.Logging.LogLevel,System.String,System.String,System.Int32)">
            <summary>
            Logs a message at the given level.
            </summary>
            <param name="message"></param>
            <param name="level"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.ILogger.Log(System.Exception,SongFeedReaders.Logging.LogLevel,System.String,System.String,System.Int32)">
            <summary>
            Logs an <see cref="T:System.Exception"/> at the given level.
            </summary>
            <param name="e"></param>
            <param name="level"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="T:SongFeedReaders.Logging.LogLevel">
            <summary>
            Logging level of a message.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Trace">
            <summary>
            Trace-level messages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Debug">
            <summary>
            Debug-level messages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Info">
            <summary>
            Info-level messages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Warning">
            <summary>
            Warning-level messages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Error">
            <summary>
            Error-level messages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Exception">
            <summary>
            Exception-level messages.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Logging.LogLevel.Disabled">
            <summary>
            Logger will not output any messages it's given.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Logging.ILoggerSettings">
            <summary>
            Settings for an <see cref="T:SongFeedReaders.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.ILoggerSettings.ModuleName">
            <summary>
            Name of the module using the logger.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.ILoggerSettings.LogLevel">
            <summary>
            Lowest <see cref="T:SongFeedReaders.Logging.LogLevel"/> to output messages from.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.ILoggerSettings.ShowModule">
            <summary>
            If true, show the module name in log messages.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.ILoggerSettings.ShortSource">
            <summary>
            If true, don't show file/member/line information in the log message.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.ILoggerSettings.EnableTimeStamp">
            <summary>
            If true, show the current time in the message.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Logging.LogExtensions">
            <summary>
            Extension methods for <see cref="T:SongFeedReaders.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Trace(SongFeedReaders.Logging.ILogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a message using <see cref="F:SongFeedReaders.Logging.LogLevel.Trace"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Trace(SongFeedReaders.Logging.ILogger,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception using <see cref="F:SongFeedReaders.Logging.LogLevel.Trace"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="e"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Debug(SongFeedReaders.Logging.ILogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a message using <see cref="F:SongFeedReaders.Logging.LogLevel.Debug"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Debug(SongFeedReaders.Logging.ILogger,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception using <see cref="F:SongFeedReaders.Logging.LogLevel.Debug"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="e"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Info(SongFeedReaders.Logging.ILogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a message using <see cref="F:SongFeedReaders.Logging.LogLevel.Info"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Info(SongFeedReaders.Logging.ILogger,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception using <see cref="F:SongFeedReaders.Logging.LogLevel.Info"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="e"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Warning(SongFeedReaders.Logging.ILogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a message using <see cref="F:SongFeedReaders.Logging.LogLevel.Warning"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Warning(SongFeedReaders.Logging.ILogger,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception using <see cref="F:SongFeedReaders.Logging.LogLevel.Warning"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="e"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Error(SongFeedReaders.Logging.ILogger,System.String,System.String,System.String,System.Int32)">
            <summary>
            Logs a message using <see cref="F:SongFeedReaders.Logging.LogLevel.Error"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="message"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Error(SongFeedReaders.Logging.ILogger,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception using <see cref="F:SongFeedReaders.Logging.LogLevel.Error"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="e"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="M:SongFeedReaders.Logging.LogExtensions.Exception(SongFeedReaders.Logging.ILogger,System.Exception,System.String,System.String,System.Int32)">
            <summary>
            Logs an exception using <see cref="F:SongFeedReaders.Logging.LogLevel.Exception"/>.
            Parameters <paramref name="file"/>, <paramref name="member"/>, <paramref name="line"/> 
            are auto-generated if no value is given for them.
            </summary>
            <param name="logger"></param>
            <param name="e"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="T:SongFeedReaders.Logging.LoggerSettings">
            <summary>
            Basic implemenation of <see cref="T:SongFeedReaders.Logging.ILoggerSettings"/>.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Logging.LoggerSettings.ModuleName">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Logging.LoggerSettings.LogLevel">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Logging.LoggerSettings.ShowModule">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Logging.LoggerSettings.ShortSource">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Logging.LoggerSettings.EnableTimeStamp">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Logging.LoggerSettings.#ctor">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Logging.LoggerSettings"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Logging.LoggerSettings.#ctor(SongFeedReaders.Logging.ILoggerSettings)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Logging.LoggerSettings"/>, 
            cloning the values from another <see cref="T:SongFeedReaders.Logging.ILoggerSettings"/>.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Models.AndruzzProtobufContainer">
            <summary>
            Data class to deserialize an Andruzz Scrapped Data protobuf container.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufContainer.formatVersion">
            <summary>
            Format version.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufContainer.scrapeEndedTimeUnix">
            <summary>
            Unix time the scrape finished.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufContainer.songs">
            <summary>
            Array of songs.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.AndruzzProtobufContainer.ScrapeTime">
            <summary>
            <see cref="T:System.DateTime"/> the scrape finished.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Models.AndruzzProtobufContainer.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Models.AndruzzProtobufSong">
            <summary>
            Data class to deserialize an Andruzz Scrapped Data protobuf song into.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Models.AndruzzProtobufSong.RankedStatus">
            <summary>
            Ranked status of a song
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.RankedStatus.Unranked">
            <summary>
            Song is not ranked.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.RankedStatus.Ranked">
            <summary>
            Song is ranked.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.RankedStatus.Qualified">
            <summary>
            Song is qualified.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.bpm">
            <summary>
            Beats per minute.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.downloadCount">
            <summary>
            Number of downloads.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.upvotes">
            <summary>
            Number of upvotes.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.downvotes">
            <summary>
            Number of downvotes.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.AndruzzProtobufSong.uploadTimeUnix">
            <summary>
            Upload Unix time.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.rankedChangeUnix">
            <summary>
            Last ranked status change in Unix time.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.AndruzzProtobufSong.mapId">
            <summary>
            BeatSaver beatmap ID.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.songDurationSeconds">
            <summary>
            Song duration in seconds.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.AndruzzProtobufSong.hashBytes">
            <summary>
            Beatmap hash as a byte array.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.AndruzzProtobufSong.songName">
            <summary>
            Song name.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.songAuthorName">
            <summary>
            Song author name.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.AndruzzProtobufSong.levelAuthorName">
            <summary>
            Level author name.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Models.AndruzzProtobufSong.rankedState">
            <summary>
            Ranked status.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Models.ISong">
            <summary>
            Interface for a basic song.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ISong.Hash">
            <summary>
            Beat Saver hash of the song, always uppercase.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ISong.Name">
            <summary>
            Song name.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ISong.Key">
            <summary>
            Beat Saver song key.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ISong.LevelAuthorName">
            <summary>
            Username of the mapper.
            </summary>
        </member>
        <member name="T:SongFeedReaders.Models.ScrapedSong">
            <summary>
            
            </summary>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.CreateFromKey(System.String,System.String,System.String,System.Uri,System.Uri,Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Creates a new ScrapedSong using the Beat Saver key as an identifier.
            </summary>
            <param name="key"></param>
            <param name="songName"></param>
            <param name="mapperName"></param>
            <param name="downloadUri"></param>
            <param name="sourceUri"></param>
            <param name="jsonData"></param>
            <param name="songHash"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="key"/> is null or empty.</exception>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.Hash">
            <summary>
            Beat Saver hash of the song, always uppercase.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.DownloadUri">
            <summary>
            Full URL to download song.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.SourceUri">
            <summary>
            What web page this song was scraped from.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.Name">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.Key">
            <summary>
            Beat Saver song key, always uppercase.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.LevelAuthorName">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.UploadDate">
            <summary>
            Upload date of the song. Uses <see cref="F:System.DateTime.MinValue"/> if not set;
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.RawData">
            <summary>
            Data this song was scraped from in JSON form.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Models.ScrapedSong.JsonData">
            <summary>
            Raw JSON data for the song.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.#ctor">
            <summary>
            Creates an empty <see cref="T:SongFeedReaders.Models.ScrapedSong"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hash"/> is null or empty.</exception>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <param name="songName"></param>
            <param name="mapperName"></param>
            
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hash"/> is null or empty.</exception>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <param name="songName"></param>
            <param name="mapperName"></param>
            <param name="songKey"></param>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.#ctor(System.String,System.String,System.String,System.Uri,System.Uri)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <param name="songName"></param>
            <param name="mapperName"></param>
            <param name="downloadUri"></param>
            <param name="sourceUri"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hash"/> is null or empty.</exception>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.#ctor(System.String,System.String,System.String,System.Uri,System.Uri,Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <param name="songName"></param>
            <param name="mapperName"></param>
            <param name="downloadUri"></param>
            <param name="sourceUri"></param>
            <param name="jsonData"></param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="hash"/> is null or empty.</exception>
        </member>
        <member name="M:SongFeedReaders.Models.ScrapedSong.ToString">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Services.IFeedFactory">
            <summary>
            A factory to generate <see cref="T:SongFeedReaders.Feeds.IFeed"/> for a given <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.IFeedFactory.Register``2(System.Func{``0,``1})">
            <summary>
            Registers a factory to generate a feed for a given <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/> type.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <typeparam name="TFeed"></typeparam>
            <param name="factory"></param>
        </member>
        <member name="M:SongFeedReaders.Services.IFeedFactory.GetFeed(SongFeedReaders.Feeds.IFeedSettings)">
            <summary>
            Gets a new feed for the given <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/>.
            </summary>
            <param name="settings"></param>
            <returns></returns>
            <exception cref="T:SongFeedReaders.Services.UnregisteredSettingsTypeException"></exception>
        </member>
        <member name="M:SongFeedReaders.Services.IFeedFactory.SettingsTypeRegistered``1">
            <summary>
            Returns true if the specified <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/> is registered.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Services.IFeedFactory.SettingsTypeRegistered``1(``0)">
            <summary>
            Returns true if the given <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/> is registered.
            </summary>
            <typeparam name="TSettings"></typeparam>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Services.FeedFactoryException">
            <summary>
            Base <see cref="T:System.Exception"/> for errors thrown by <see cref="T:SongFeedReaders.Services.IFeedFactory"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.FeedFactoryException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.FeedFactoryException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.FeedFactoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.FeedFactoryException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Services.UnregisteredSettingsTypeException">
            <summary>
            Exception thrown when <see cref="M:SongFeedReaders.Services.IFeedFactory.GetFeed(SongFeedReaders.Feeds.IFeedSettings)"/> is called with
            an unregistered <see cref="T:SongFeedReaders.Feeds.IFeedSettings"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.UnregisteredSettingsTypeException.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.UnregisteredSettingsTypeException.#ctor(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.UnregisteredSettingsTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.UnregisteredSettingsTypeException.#ctor(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Services.ISongInfoProvider">
            <summary>
            An object that can get song details by hash or key.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.ISongInfoProvider.Priority">
            <summary>
            Priority of the <see cref="T:SongFeedReaders.Services.ISongInfoProvider"/>.
            Higher priorities are queried first.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.ISongInfoProvider.Available">
            <summary>
            Service is available.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.ISongInfoProvider.GetSongByHashAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SongFeedReaders.Services.SongInfoProviderException"></exception>
        </member>
        <member name="M:SongFeedReaders.Services.ISongInfoProvider.GetSongByKeyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SongFeedReaders.Services.SongInfoProviderException"></exception>
        </member>
        <member name="M:SongFeedReaders.Services.ISongInfoProvider.GetSongByHashAsync(System.String)">
            <summary>
            
            </summary>
            <param name="hash"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SongFeedReaders.Services.SongInfoProviderException"></exception>
        </member>
        <member name="M:SongFeedReaders.Services.ISongInfoProvider.GetSongByKeyAsync(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SongFeedReaders.Services.SongInfoProviderException"></exception>
        </member>
        <member name="T:SongFeedReaders.Services.SongInfoProviderException">
            <summary>
            Contains Exceptions thrown by ISongInfoProvider.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviderException.#ctor">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Services.SongInfoProviderException"/>.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviderException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Services.SongInfoProviderException"/> with a message.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:SongFeedReaders.Services.SongInfoProviderException"/> with a message and inner exception.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider">
            <summary>
            Uses Andruzz's Scrapped Data to provide song information.
            <see href="https://github.com/andruzzzhka/BeatSaberScrappedData"/>
            </summary>
        </member>
        <member name="F:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.WebClient">
            <summary>
            Web client to use for web requests.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.FilePath">
            <summary>
            Path to the local file.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.MaxAge">
            <summary>
            Maximum age of cached data.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.AllowWebFetch">
            <summary>
            If true, allow fetching new data from the web.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.CacheToDisk">
            <summary>
            If true, cache the downloaded data to disk.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.#ctor(WebUtilities.IWebClient,SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Create a new <see cref="T:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider"/> with a <see cref="T:WebUtilities.IWebClient"/>
            and <see cref="T:SongFeedReaders.Logging.ILogFactory"/>.
            </summary>
            <param name="client"></param>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.#ctor(System.String,WebUtilities.IWebClient,SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Create a new <see cref="T:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider"/> with a location to store downloaded data,
            an <see cref="T:WebUtilities.IWebClient"/>, and an <see cref="T:SongFeedReaders.Logging.ILogFactory"/>.
            </summary>
            <param name="filePath"></param>
            <param name="client"></param>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.InitializeData(System.Threading.CancellationToken)">
            <summary>
            Fetches the latest scraped data and/or loads data from the disk.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.Available">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.GetSongByHashAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.AndruzzScrapedInfoProvider.GetSongByKeyAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase">
            <summary>
            Base class for an <see cref="T:SongFeedReaders.Services.ISongInfoProvider"/>.
            </summary>
        </member>
        <member name="F:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.Logger">
            <summary>
            Logger used by this instance.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.Priority">
            <inheritdoc/>
        </member>
        <member name="P:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.Available">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.#ctor(SongFeedReaders.Logging.ILogFactory)">
            <summary>
            Initializes a new <see cref="T:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase"/> with an <see cref="T:SongFeedReaders.Logging.ILogFactory"/>.
            </summary>
            <param name="logFactory"></param>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.GetSongByHashAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.GetSongByKeyAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.GetSongByHashAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SongFeedReaders.Services.SongInfoProviders.SongInfoProviderBase.GetSongByKeyAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:SongFeedReaders.Utilities.BeatSaverHelper">
            <summary>
            Helpers for interacting with Beat Saver.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Utilities.BeatSaverHelper.BeatSaverUri">
            <summary>
            Beat Saver's URI. Default is <see href="https://beatsaver.com"/>.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Utilities.BeatSaverHelper.BeatSaverApiUri">
            <summary>
            URI for Beat Saver's API.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Utilities.BeatSaverHelper.BeatSaverDownloadUri">
            <summary>
            Base URI for Beat Saver downloads.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Utilities.BeatSaverHelper.BeatSaverDetailsFromKeyBaseUrl">
            <summary>
            Base URI for Beat Saver song details using a key identifier.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Utilities.BeatSaverHelper.BeatSaverDetailsFromHashBaseUrl">
            <summary>
            Base URI for Beat Saver song details using a hash identifier.
            </summary>
        </member>
        <member name="M:SongFeedReaders.Utilities.BeatSaverHelper.GetDownloadUriByHash(System.String)">
            <summary>
            Returns a Beat Saver beatmap download URI using the beatmap's hash.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Utilities.BeatSaverHelper.GetBeatSaverDetailsByKey(System.String)">
            <summary>
            Returns a URI for requesting a beatmap's details by key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SongFeedReaders.Utilities.BeatSaverHelper.GetBeatSaverDetailsByHash(System.String)">
            <summary>
            Returns a URI for requesting a beatmap's details by hash.
            </summary>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:SongFeedReaders.Utilities.Util">
            <summary>
            Useful static utilities.
            </summary>
        </member>
        <member name="P:SongFeedReaders.Utilities.Util.Now">
            <summary>
            Returns the current <see cref="T:System.DateTime"/>. Uses <see cref="P:System.DateTime.UtcNow"/>
            if <see cref="P:System.DateTime.Now"/> fails (can happen on certain Mono runtimes with certain locales apparently).
            </summary>
        </member>
        <member name="M:SongFeedReaders.Utilities.Util.ToUTCWebTime(System.DateTime)">
            <summary>
            Converts the given <see cref="T:System.DateTime"/> to UTC web format.
            Used for Beat Saver's API.
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
    </members>
</doc>
